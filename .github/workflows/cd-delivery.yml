name: "[Etapa 0] Entrega Contínua" 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 1. Build e Testes
  build-and-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restaurar dependências
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Rodar Testes
        run: dotnet test --configuration Release --no-build --verbosity normal
  
    # 2. Análise SonarQube
    sonarqube-analysis:
      runs-on: ubuntu-latest
      needs: build-and-tests
      steps:
        - name: Fazer checkout do repositório
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Configurar .NET
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: '9.0.x'
            
        - name: Cache de pacotes do SonarQube Cloud
          uses: actions/cache@v4
          with:
            path: ~\sonar\cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar
            
        - name: Cache do scanner do SonarQube Cloud
          id: cache-sonar-scanner
          uses: actions/cache@v4
          with:
            path: ${{ runner.temp }}\scanner
            key: ${{ runner.os }}-sonar-scanner
            restore-keys: ${{ runner.os }}-sonar-scanner
            
        - name: Instalar scanner do SonarQube Cloud
          if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
          shell: powershell
          run: |
            New-Item -Path ${{ runner.temp }}\scanner -ItemType Directory
            dotnet tool update dotnet-sonarscanner --tool-path ${{ runner.temp }}\scanner

        - name: Executar Análise SonarQube
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} 
          run: |
            dotnet tool install --global dotnet-sonarscanner
            export PATH="$PATH:/home/runner/.dotnet/tools"
            dotnet sonarscanner begin \
              /k:"mana-food_mana-food-microsservice-produto" \
              /o:"mana-food" \
              /d:sonar.host.url="$SONAR_HOST_URL" \
              /d:sonar.login="$SONAR_TOKEN" \
              /d:sonar.branch.name="main" \
              /d:sonar.exclusions="**/bin/**,**/obj/**,**/*.dll,**/*.exe" \
              /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"
            dotnet build --no-incremental
            dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"


  # 3. Build e Push da Imagem Docker
  docker-build-push:
    runs-on: ubuntu-latest
    needs: build-and-tests
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Fazer checkout do repositório
        uses: actions/checkout@v4

      - name: Instalar cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Login no registro ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extrair metadados Docker
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            latest

      - name: Construir e enviar imagem Docker
        id: docker-build-and-push-image
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: Presentation/ManaFood.WebAPI/Dockerfile # ToDo: atualizar o caminho do Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Assinar a imagem Docker publicada
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.docker-build-and-push-image.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
        
#  # 4. Trigger infra deployment pipeline #ToDo: descomentar quando o pipeline de infra estiver pronta
#  trigger-pipeline-repo-infra:
#    runs-on: ubuntu-latest
#    needs: docker-build-push
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Trigger infra pipeline via GitHub API
#        env:
#          PERSONAL_ACCESS_TOKEN_MANA_FOOD_APP: ${{ secrets.PERSONAL_ACCESS_TOKEN_MANA_FOOD_APP }}
#        run: |
#          curl -X POST \
#            -H "Accept: application/vnd.github+json" \
#            -H "Authorization: Bearer $PERSONAL_ACCESS_TOKEN_MANA_FOOD_APP" \
#            https://api.github.com/repos/mana-food/mana-food-infra/actions/workflows/cd-deploy.yml/dispatches \
#            -d '{"ref":"main","inputs":{"image":"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"}}'
